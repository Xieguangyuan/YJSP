 VideoCapture cap(0);
            namedWindow("Control", cv::WindowFlags::WINDOW_AUTOSIZE);

            int iLowH = 0;
            int iHighH = 179;

            int iLowS = 0;
            int iHighS = 255;

            int iLowV = 0;
            int iHighV = 255;

            createTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
            createTrackbar("HighH", "Control", &iHighH, 179);

            createTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
            createTrackbar("HighS", "Control", &iHighS, 255);

            createTrackbar("LowV", "Control", &iLowV, 255); //Value (0 - 255)
            createTrackbar("HighV", "Control", &iHighV, 255);

            while (true)
            {
                Mat imgOriginal;

                bool bSuccess = cap.read(imgOriginal);

                if (!bSuccess)
                {
                    std::cout << "Cannot read a frame from video stream"
                              << "\n";
                    break;
                }

                Mat imgHSV;
                cv::rotate(imgOriginal, imgOriginal, cv::ROTATE_180);

                cvtColor(imgOriginal, imgHSV, COLOR_BGR2HSV);

                Mat imgThresholded;

                inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imgThresholded);

                erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(12, 12)));  //腐蚀
                dilate(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(18, 18))); //膨胀

                imshow("Thresholded Image", imgThresholded);
                imshow("Original", imgOriginal);

                if (waitKey(30) == 27)
                {
                    std::cout << "esc key is pressed by user"
                              << "\n";
                    break;
                }
            }

              if (HSVTrack == '1')
                    {
                        SPGO.TF.H_LOW = 150, SPGO.TF.S_LOW = 160, SPGO.TF.V_LOW = 0;
                        SPGO.TF.H_HIGH = 179;
                        SPGO.TF.S_HIGH = 255;
                        SPGO.TF.V_HIGH = 255;
                    }
                    else if (HSVTrack == '2')
                    {
                        SPGO.TF.H_LOW = 60, SPGO.TF.S_LOW = 80, SPGO.TF.V_LOW = 70;
                        SPGO.TF.H_HIGH = 90;
                        SPGO.TF.S_HIGH = 140;
                        SPGO.TF.V_HIGH = 255;
                    }
                    else if (HSVTrack == '3')
                    {
                        SPGO.TF.H_LOW = 90, SPGO.TF.S_LOW = 160, SPGO.TF.V_LOW = 0;
                        SPGO.TF.H_HIGH = 100;
                        SPGO.TF.S_HIGH = 255;
                        SPGO.TF.V_HIGH = 255;
                    }



                      V4L2Tools::V4L2Drive cap("/dev/video0", {.ImgWidth = 256,
                                                     .ImgHeight = 192,
                                                     .FrameBuffer = 1,
                                                     .Is_fastMode = true,
                                                     .PixFormat = V4L2_PIX_FMT_YUYV});
            cap.V4L2Control(V4L2_CID_ZOOM_ABSOLUTE, 0x8005);
            usleep(50000);
            cap.V4L2Control(V4L2_CID_ZOOM_ABSOLUTE, 0x8801);
            cv::namedWindow("test", cv::WINDOW_NORMAL);
            cv::setWindowProperty("test", cv::WND_PROP_FULLSCREEN, cv::WINDOW_FULLSCREEN);
            unsigned char *tmpDataBGR = cap.RGB24DataInit();
            while (true)
            {
                unsigned char *tmpData = cap.V4L2Read();
                cap.yuyv2rgb24(tmpData, tmpDataBGR, 256, 192);
                cv::Mat tmpMat = cv::Mat(192, 256, CV_8UC3, tmpDataBGR);

                cv::resize(tmpMat, tmpMat, cv::Size(800, 600));
                //cv::rotate(tmpMat, tmpMat, cv::ROTATE_180);

                imshow("test", tmpMat);
                cv::waitKey(10);
            }